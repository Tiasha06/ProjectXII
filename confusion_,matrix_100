import math

#define all Macros here

DELTA = 0.0001
REF_AUTH1 = "C:\\tiashapython\\janeref.txt"
REF_AUTH2 = "C:\\tiashapython\\hardyref.txt"
REF_AUTH3 = "C:\\tiashapython\\doyleref.txt"
AUTH3_SAMPLE = "C:\\tiashapython\\doylesample.txt"
AUTH2_SAMPLE = "C:\\tiashapython\\hardysample.txt"
AUTH1_SAMPLE = "C:\\tiashapython\\janesample.txt"
AUTHOR = ["Jane Austen", "Thomas Hardy", "Conan Doyle"]
SEP = "sampletext"

#ln_prob Function: Takes the reference file, reads it and finds the number of words in it.
#          Takes the dictionary with the count occurences of unique words in the sample text file.
#          If the word in sample text exists in the dict, probability of the words being in ref file
#          is calculated. Returns the summation of ln of probabilities.

def ln_prob(sample, wordlist, auth):
    #data = file.read()
    #print(data)
    sum = 0
    list = sample.split()
    wordcount = len(wordlist)

    for words in list:
        if words in wordlist:
            x = wordlist.get(words)[auth]
            prob = x/wordcount
            sum = sum + math.log(prob, math.e)

    return sum

def book_dict(filename): #returns dictionary with count occurance for a file
    try:
        bookdict = dict()
        openbook = open(filename, "rt")    #opens ref file in read mode
        for line in openbook:
            for word in line.split():
                if word in bookdict:
                    bookdict[word] = bookdict[word] + 1
                else:
                    bookdict[word] = 1
        openbook.close()
        return bookdict
    except IOError as e:
        print (e)

#function to calculate count occurences of each words and stored in dict
#returns dictionary

def author_dict(): #merges the three dictionaries
    try:

        book1 = book_dict(REF_AUTH1)
        book2 = book_dict(REF_AUTH2)
        book3 = book_dict(REF_AUTH3)

        book = {**book1, **book2, **book3}
        for key, value in book.items():
            if key in book1 and key not in book2 and key not in book3:
                book[key] = [book1[key], DELTA, DELTA]
            elif key not in book1 and key in book2 and key not in book3:
                book[key] = [DELTA, book2[key], DELTA]
            elif key not in book1 and key not in book2 and key in book3:
                book[key] = [DELTA, DELTA, book3[key]]
            elif key in book1 and key in book2 and key not in book3:
                book[key] = [book1[key], book2[key], DELTA]
            elif key in book1 and key not in book2 and key in book3:
                book[key] = [book1[key], DELTA, book3[key]]
            elif key not in book1 and key in book2 and key in book3:
                book[key] = [DELTA, book2[key], book3[key]]
            else:
                book[key] = [book1[key], book2[key], value]
        return book
    except IOError as e:
        print (e)

# sample is a line, book is the combined dictionary of reference file
def predict(sample, book):
    i = 0
    p_auth = [0,0,0]
    while i <= 2:
        #book_ln = ln_prob(sample, book, i)
        p_auth[i] = ln_prob(sample, book, i)
        #print (f'log likeliness of sample being written by {AUTHOR[i]}', p_auth[i])
        i = i + 1
    return p_auth.index(max(p_auth))


    # Read sample file with 50 samples seperated by sampletext
def s_predict(sample, sep, s_list):
    with open(sample, 'rt') as sfile:
        content = sfile.read()
        for line in content.split(sep):
            auth = predict(line, book)
            s_list[AUTHOR[auth]] = s_list[AUTHOR[auth]] + 1
    return s_list

#Main program start

#Sample sentence
#sample = input("Enter path of the sample file to be analysed: ")
try:
    s_ro= {AUTHOR[0] : 0,
            AUTHOR[1] : 0,
            AUTHOR[2] : 0}

    s_em = {AUTHOR[0] : 0,
            AUTHOR[1] : 0,
            AUTHOR[2] : 0}

    s_el = {AUTHOR[0] : 0,
            AUTHOR[1] : 0,
            AUTHOR[2] : 0}

    # create common dict for all reference files
    book = author_dict()

    # confusion matrix
    s_em = s_predict(AUTH1_SAMPLE, SEP, s_em)
    print(f'Prediction for {AUTHOR[0]} sample - {s_em}')

    s_el = s_predict(AUTH2_SAMPLE, SEP, s_el)
    print(f'Prediction for {AUTHOR[1]} sample - {s_el}')

    s_ro = s_predict(AUTH3_SAMPLE, SEP, s_ro)
    print(f'Prediction for {AUTHOR[2]} sample - {s_ro}')

except IOError as e:
    print(e)
